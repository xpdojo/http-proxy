#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
	daemon
	maxconn 1024
	# pidfile /var/run/haproxy.pid
	log stdout format raw local0 debug
	# syslog server
	# https://www.haproxy.com/blog/introduction-to-haproxy-logging/
	# log 127.0.0.1 format raw local0 debug
	# user haproxy
	# group haproxy

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
	log global
	log-format "Connect from %ci:%cp to backend(%b/%s) [%t] (frontend: %ft) %{+Q}r (Status Code: %ST)"
	# log-format "%b/%s"
	mode http
	# https://www.haproxy.com/documentation/hapee/2-5r1/load-balancing/client-ip-preservation/add-x-forward-for-header/
	option forwardfor if-none

	balance roundrobin
	timeout client 10s
	timeout connect 5s
	timeout server 10s
	timeout http-request 10s

# https://www.haproxy.com/blog/accelerate-your-apis-by-using-the-haproxy-cache/
# https://www.haproxy.com/documentation/hapee/2-5r1/configuration/config-sections/cache/
cache static_cache
  total-max-size 4095   # MB
  max-object-size 10000 # bytes
  max-age 30            # seconds

#---------------------------------------------------------------------
# statistics for the frontend
#---------------------------------------------------------------------
listen stats
	bind *:8404
	stats enable
	stats uri /stats
	stats refresh 5s
	stats auth admin:markruler

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend fe_proxy
	bind :80
	
	# https://www.haproxy.com/documentation/hapee/2-5r1/load-balancing/protocols/http-2/
	# https://www.haproxy.com/documentation/hapee/2-5r1/api/runtime-api/add-ssl-crt-list/
	# ALPN(Application Layer Protocol Negotiation)
	# bind :443 alpn h2,http/1.1 ssl crt /etc/ssl/certs/web.pem crt /etc/ssl/certs/mob.pem
	bind :443 alpn h2,http/1.1 ssl crt-list /etc/ssl/certs/crt-list

	# https://www.haproxy.com/blog/redirect-http-to-https-with-haproxy/
	# HTTP(:80)로 요청이 올 경우
	# 301 Moved Permanently 코드와 함께
	# HTTPS(:443)로 요청을 보내준다.
	http-request redirect scheme https code 301 unless { ssl_fc }

	# https://www.haproxy.com/blog/haproxy-and-http-strict-transport-security-hsts-header-in-http-redirects/
	# Enabling HSTS (HTTP Strict Transport Security)
	http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload;"

	# https://atl.kr/dokuwiki/doku.php/let_s_encrypt_certbot_ssl_with_haproxy
	# https://www.haproxy.com/documentation/hapee/2-5r1/configuration/acls/overview/
	acl acl_letsencrypt path_beg /.well-known/acme-challenge/
	use_backend be_letsencrypt if acl_letsencrypt

	# https://www.haproxy.com/blog/how-to-map-domain-names-to-backend-server-pools-with-haproxy/
	acl ACL_web hdr(host) -i web.example.com
	use_backend be_web if ACL_web

	acl ACL_mob hdr(host) -i mob.example.com
	use_backend be_mob if ACL_mob

	# listen으로 따로 등록하지 않을 경우
	# stats uri /stats
	# stats refresh 10s

#---------------------------------------------------------------------
# round robin balancing between the various backends
# https://www.haproxy.com/blog/how-to-enable-health-checks-in-haproxy/
# https://www.haproxy.com/documentation/hapee/2-5r1//load-balancing/health-checking/active-health-checks/
#---------------------------------------------------------------------
backend be_web
	#---------------------------------------
	# [default httpchk]
	# http-check send meth OPTIONS uri /
	# http-check expect status 200
	#---------------------------------------
	# http-check expect string OK
	option httpchk
	http-check expect ! rstatus ^5

	http-request cache-use static_cache if { path_beg /public/ }
  http-response cache-store static_cache

	#---------------------------------------
	# [default server]
	# server name host:port check inter 2s fall 3 rise 2
	#---------------------------------------
	server web1 1.2.3.10:21212 check
	server web2 1.2.3.20:21212 check

backend be_mob
	option httpchk
	http-check expect ! rstatus ^5

	http-request cache-use static_cache if { path_beg /public/ }
  http-response cache-store static_cache

	server mob1 1.2.3.10:31212 check
	server mob2 1.2.3.20:31212 check

backend be_letsencrypt
	server srv_letsencrypt 1.2.3.4:63443
